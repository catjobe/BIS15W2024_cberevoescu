selectInput("x", "Select Variable", choices = c("Academic_Yr", "Campus", "Category"), selected = "Academic_Yr")
), #closing the first box
box(width = 8,
plotOutput("plot")
) #closes the second box
) #closes the row
) #closes the dashboard bod
) #close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot ({
ggplot(data = UC_admit, aes_string(x = "Ethnicity", y = "FilteredCountFR", fill = input$x)) +
geom_col() +
labs(title = "Admissions by Ethnicity",
x = "Ethnicity",
y = "Number of Admits")
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Admissions by Ethnicity"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(box(title = "Variables", width = 3, #controlling box width
selectInput("x", "Select Variable", choices = c("Academic_Yr", "Campus", "Category"), selected = "Academic_Yr")
), #closing the first box
box(width = 8,
plotOutput("plot")
) #closes the second box
) #closes the row
) #closes the dashboard bod
) #close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot ({
ggplot(data = UC_admit, aes_string(x = "Ethnicity", y = "FilteredCountFR", fill = input$x)) +
geom_col() +
labs(title = "Admissions by Ethnicity",
x = "Ethnicity",
y = "Number of Admits") +
theme(plot.title = element_text(size = rel(1.3), hjust = 0.5), axis.text.x = element_text(angle = 60, hjust = 1))
})
}
shinyApp(ui, server)
runApp('Desktop/BIS15W2024_cberevoescu/all_labs_hw/hw13_shiny/hw3_app_q2.R')
View(UC_admit)
ui <- dashboardPage(
dashboardHeader(title = "Enrollment by Year"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(box(title = "Variables", width = 3, #controlling box width
selectInput("x", "Select Variable", choices = c("Academic_Yr", "Campus", "Category"), selected = "Academic_Yr")
), #closing the first box
box(width = 8,
plotOutput("plot")
) #closes the second box
) #closes the row
) #closes the dashboard bod
) #close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot ({
ggplot(data = UC_admit, aes_string(x = "Academic_Yr", y = "FilteredCountFR", fill = input$x)) +
geom_col() +
labs(title = "Enrollment by Year",
x = "Year",
y = "Enrollment Number") +
theme(plot.title = element_text(size = rel(1.3), hjust = 0.5), axis.text.x = element_text(angle = 60, hjust = 1))
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Enrollment by Year"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(box(title = "Variables", width = 3, #controlling box width
selectInput("x", "Select Variable", choices = c("Academic_Yr", "Campus", "Category"), selected = "Academic_Yr")
), #closing the first box
box(width = 8,
plotOutput("plot")
) #closes the second box
) #closes the row
) #closes the dashboard bod
) #close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot ({
mutate(Academic_Yr = as.factor(Academic_Yr)) %>%
ggplot(data = UC_admit, aes_string(x = "Academic_Yr", y = "FilteredCountFR", fill = input$x)) +
geom_col() +
labs(title = "Enrollment by Year",
x = "Year",
y = "Enrollment Number") +
theme(plot.title = element_text(size = rel(1.3), hjust = 0.5), axis.text.x = element_text(angle = 60, hjust = 1))
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Enrollment by Year"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(box(title = "Variables", width = 3, #controlling box width
selectInput("x", "Select Variable", choices = c("Academic_Yr", "Campus", "Category"), selected = "Academic_Yr")
), #closing the first box
box(width = 8,
plotOutput("plot")
) #closes the second box
) #closes the row
) #closes the dashboard bod
) #close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot ({
UC_admit %>%
mutate(Academic_Yr = as.factor(Academic_Yr)) %>%
ggplot(aes_string(x = "Academic_Yr", y = "FilteredCountFR", fill = input$x)) +
geom_col() +
labs(title = "Enrollment by Year",
x = "Year",
y = "Enrollment Number") +
theme(plot.title = element_text(size = rel(1.3), hjust = 0.5), axis.text.x = element_text(angle = 60, hjust = 1))
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Enrollment by Year"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(box(title = "Variables", width = 3, #controlling box width
selectInput("x", "Select Variable", choices = c("Academic_Yr", "Campus", "Category"), selected = "Academic_Yr")
), #closing the first box
box(width = 8,
plotOutput("plot")
) #closes the second box
) #closes the row
) #closes the dashboard bod
) #close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot ({
UC_admit %>%
mutate(Academic_Yr = as.factor(Academic_Yr)) %>%
filter(Category == "Enrollees") %>%
ggplot(aes_string(x = "Academic_Yr", y = "FilteredCountFR", fill = input$x)) +
geom_col() +
labs(title = "Enrollment by Year",
x = "Year",
y = "Enrollment Number") +
theme(plot.title = element_text(size = rel(1.3), hjust = 0.5), axis.text.x = element_text(angle = 60, hjust = 1))
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Enrollment by Year"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(box(title = "Variables", width = 3, #controlling box width
selectInput("x", "Select Variable", choices = c("Academic_Yr", "Campus", "Category"), selected = "Academic_Yr")
selectInput("y", "Select Campus", choices = unique(UC_admit$Campus)), hr())
ui <- dashboardPage(
dashboardHeader(title = "Enrollment by Year"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(box(title = "Variables", width = 3, #controlling box width
selectInput("x", "Select Variable", choices = c("Academic_Yr", "Campus", "Category"), selected = "Academic_Yr"),
selectInput("y", "Select Campus", choices = unique(UC_admit$Campus)), hr())
), #closing the first box
box(width = 8,
plotOutput("plot")
) #closes the second box
) #closes the row
) #closes the dashboard bod
) #close the ui
ui <- dashboardPage(
dashboardHeader(title = "Enrollment by Year"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(box(title = "Variables", width = 3, #controlling box width
selectInput("x", "Select Variable", choices = c("Academic_Yr", "Campus", "Category"), selected = "Academic_Yr"),
selectInput("y", "Select Campus", choices = unique(UC_admit$Campus), hr())
), #closing the first box
box(width = 8,
plotOutput("plot")
) #closes the second box
) #closes the row
) #closes the dashboard bod
) #close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot ({
UC_admit %>%
mutate(Academic_Yr = as.factor(Academic_Yr)) %>%
filter(Category == "Enrollees") %>%
filter(Campus == )
ui <- dashboardPage(
dashboardHeader(title = "Enrollment by Year"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(box(title = "Variables", width = 3, #controlling box width
selectInput("x", "Select Variable", choices = c("Academic_Yr", "Campus", "Category"), selected = "Academic_Yr"),
selectInput("y", "Select Campus", choices = unique(UC_admit$Campus), hr())
), #closing the first box
box(width = 8,
plotOutput("plot")
) #closes the second box
) #closes the row
) #closes the dashboard bod
) #close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot ({
UC_admit %>%
mutate(Academic_Yr = as.factor(Academic_Yr)) %>%
filter(Category == "Enrollees") %>%
filter(Campus == input$y) %>%
ggplot(aes_string(x = "Academic_Yr", y = "FilteredCountFR", fill = input$x)) +
geom_col() +
labs(title = "Enrollment by Year",
x = "Year",
y = "Enrollment Number") +
theme(plot.title = element_text(size = rel(1.3), hjust = 0.5), axis.text.x = element_text(angle = 60, hjust = 1))
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Enrollment by Year"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(box(title = "Variables", width = 3, #controlling box width
selectInput("x", "Select Variable", choices = c("Academic_Yr", "Campus", "Category"), selected = "Academic_Yr"),
selectInput("y", "Select Campus", choices = unique(UC_admit$Campus), hr())
), #closing the first box
box(width = 8,
plotOutput("plot")
) #closes the second box
) #closes the row
) #closes the dashboard bod
) #close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot ({
UC_admit %>%
mutate(Academic_Yr = as.factor(Academic_Yr)) %>%
filter(Campus == input$y) %>%
ggplot(aes_string(x = "Academic_Yr", y = "FilteredCountFR", fill = input$x)) +
geom_col() +
labs(title = "Enrollment by Year",
x = "Year",
y = "Enrollment Number") +
theme(plot.title = element_text(size = rel(1.3), hjust = 0.5), axis.text.x = element_text(angle = 60, hjust = 1))
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Enrollment by Year"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(box(title = "Variables", width = 3, #controlling box width
selectInput("x", "Select Variable", choices = c("Academic_Yr", "Campus", "Category"), selected = "Academic_Yr"),
selectInput("y", "Select Campus", choices = unique(UC_admit$Campus), hr()),
selectInput("z", "Select Category Type", choices = unique(UC_admit$Category), hr()),
), #closing the first box
box(width = 8,
plotOutput("plot")
) #closes the second box
) #closes the row
) #closes the dashboard bod
) #close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot ({
UC_admit %>%
mutate(Academic_Yr = as.factor(Academic_Yr)) %>%
filter(Campus == input$y) %>%
ggplot(aes_string(x = "Academic_Yr", y = "FilteredCountFR", fill = input$x)) +
geom_col() +
labs(title = "Enrollment by Year",
x = "Year",
y = "Enrollment Number") +
theme(plot.title = element_text(size = rel(1.3), hjust = 0.5), axis.text.x = element_text(angle = 60, hjust = 1))
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Enrollment by Year"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(box(title = "Variables", width = 3, #controlling box width
selectInput("x", "Select Variable", choices = c("Academic_Yr", "Campus", "Category"), selected = "Academic_Yr"),
selectInput("y", "Select Campus", choices = unique(UC_admit$Campus), hr()),
selectInput("z", "Select Category Type", choices = unique(UC_admit$Category), hr()),
), #closing the first box
box(width = 8,
plotOutput("plot")
) #closes the second box
) #closes the row
) #closes the dashboard bod
) #close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot ({
UC_admit %>%
mutate(Academic_Yr = as.factor(Academic_Yr)) %>%
filter(Campus == input$y) %>%
filter(Campus == input$z)
ggplot(aes_string(x = "Academic_Yr", y = "FilteredCountFR", fill = input$x)) +
geom_col() +
labs(title = "Enrollment by Year",
x = "Year",
y = "Enrollment Number") +
theme(plot.title = element_text(size = rel(1.3), hjust = 0.5), axis.text.x = element_text(angle = 60, hjust = 1))
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Enrollment by Year"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(box(title = "Variables", width = 3, #controlling box width
selectInput("x", "Select Variable", choices = c("Academic_Yr", "Campus", "Category"), selected = "Academic_Yr"),
selectInput("y", "Select Campus", choices = unique(UC_admit$Campus), hr()),
selectInput("z", "Select Category Type", choices = unique(UC_admit$Category), hr()),
), #closing the first box
box(width = 8,
plotOutput("plot")
) #closes the second box
) #closes the row
) #closes the dashboard bod
) #close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot ({
UC_admit %>%
mutate(Academic_Yr = as.factor(Academic_Yr)) %>%
filter(Campus == input$y) %>%
filter(Campus == input$z) %>%
ggplot(aes_string(x = "Academic_Yr", y = "FilteredCountFR", fill = input$x)) +
geom_col() +
labs(title = "Enrollment by Year",
x = "Year",
y = "Enrollment Number") +
theme(plot.title = element_text(size = rel(1.3), hjust = 0.5), axis.text.x = element_text(angle = 60, hjust = 1))
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Enrollment by Year"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(box(title = "Variables", width = 3, #controlling box width
selectInput("x", "Select Variable", choices = c("Academic_Yr", "Campus", "Category"), selected = "Academic_Yr"),
selectInput("y", "Select Campus", choices = unique(UC_admit$Campus), hr()),
selectInput("z", "Select Category Type", choices = unique(UC_admit$Category), hr()),
), #closing the first box
box(width = 8,
plotOutput("plot")
) #closes the second box
) #closes the row
) #closes the dashboard bod
) #close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot ({
UC_admit %>%
mutate(Academic_Yr = as.factor(Academic_Yr)) %>%
filter(Campus == input$y) %>%
filter(Category == "Enrollees") %>%
ggplot(aes_string(x = "Academic_Yr", y = "FilteredCountFR", fill = input$x)) +
geom_col() +
labs(title = "Enrollment by Year",
x = "Year",
y = "Enrollment Number") +
theme(plot.title = element_text(size = rel(1.3), hjust = 0.5), axis.text.x = element_text(angle = 60, hjust = 1))
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Enrollment by Year"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(box(title = "Variables", width = 3, #controlling box width
selectInput("x", "Select Variable", choices = c("Academic_Yr", "Campus", "Category"), selected = "Academic_Yr"),
selectInput("y", "Select Campus", choices = unique(UC_admit$Campus), hr()),
), #closing the first box
box(width = 8,
plotOutput("plot")
) #closes the second box
) #closes the row
) #closes the dashboard bod
) #close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot ({
UC_admit %>%
mutate(Academic_Yr = as.factor(Academic_Yr)) %>%
filter(Campus == input$y) %>%
filter(Category == "Enrollees") %>%
ggplot(aes_string(x = "Academic_Yr", y = "FilteredCountFR", fill = input$x)) +
geom_col() +
labs(title = "Enrollment by Year",
x = "Year",
y = "Enrollment Number") +
theme(plot.title = element_text(size = rel(1.3), hjust = 0.5), axis.text.x = element_text(angle = 60, hjust = 1))
})
}
shinyApp(ui, server)
View(UC_admit)
ui <- dashboardPage(
dashboardHeader(title = "Enrollment by Year"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(box(title = "Variables", width = 3, #controlling box width
selectInput("x", "Select Variable", choices = c("Academic_Yr", "Campus", "Category"), selected = "Academic_Yr"),
selectInput("y", "Select Campus", choices = unique(UC_admit$Campus), hr()),
radioButtons("z", "Select Category", choices = c("Enrollees", "Admits", "Applicants"),
selected = "Enrollees")
), #closing the first box
box(width = 8,
plotOutput("plot")
) #closes the second box
) #closes the row
) #closes the dashboard bod
) #close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot ({
UC_admit %>%
mutate(Academic_Yr = as.factor(Academic_Yr)) %>%
filter(Campus == input$y) %>%
filter(Category == input$z) %>%
ggplot(aes_string(x = "Academic_Yr", y = "FilteredCountFR", fill = input$x)) +
geom_col() +
labs(title = "Enrollment by Year",
x = "Year",
y = "Enrollment Number") +
theme(plot.title = element_text(size = rel(1.3), hjust = 0.5), axis.text.x = element_text(angle = 60, hjust = 1))
})
}
shinyApp(ui, server)
UC_admit %>%
filter(Campus = "Davis") %>%
mutate(Academic_Yr = as.factor(Academic_Yr)) %>%
ggplot(aes(x = Academic_Yr, y = FilteredCountFR, fill = Category)) +
geom_col(na.rm = T) +
labs(title = "Enrollment at Davis",
x = "Year",
y = "Number of Enrollees") +
theme(plot.title = element_text(size = rel(1.3), hjust = 0.5))
UC_admit %>%
filter(Campus == "Davis") %>%
mutate(Academic_Yr = as.factor(Academic_Yr)) %>%
ggplot(aes(x = Academic_Yr, y = FilteredCountFR, fill = Category)) +
geom_col(na.rm = T) +
labs(title = "Enrollment at Davis",
x = "Year",
y = "Number of Enrollees") +
theme(plot.title = element_text(size = rel(1.3), hjust = 0.5))
ui <- dashboardPage(
dashboardHeader(title = "Admissions by Ethnicity"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(box(title = "Variables", width = 3, #controlling box width
selectInput("x", "Select Variable", choices = c("Academic_Yr", "Campus", "Category"), selected = "Academic_Yr")
), #closing the first box
box(width = 8,
plotOutput("plot")
) #closes the second box
) #closes the row
) #closes the dashboard bod
) #close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot ({
ggplot(data = UC_admit, aes_string(x = "Ethnicity", y = "FilteredCountFR", fill = input$x)) +
geom_col() +
labs(title = "Admissions by Ethnicity",
x = "Ethnicity",
y = "Number of Admits") +
theme(plot.title = element_text(size = rel(1.3), hjust = 0.5), axis.text.x = element_text(angle = 60, hjust = 1))
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Admissions by Ethnicity"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(box(title = "Variables", width = 3, #controlling box width
selectInput("x", "Select Variable", choices = c("Academic_Yr", "Campus", "Category"), selected = "Academic_Yr"),
radioButtons("y", "Select Category", choices = c("Admits", "Applicants", "Enrollees"), selected = "Admits")
), #closing the first box
box(width = 8,
plotOutput("plot")
) #closes the second box
) #closes the row
) #closes the dashboard bod
) #close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot ({
UC_admit %>%
filter(Category == input$y) %>%
ggplot(aes_string(x = "Ethnicity", y = "FilteredCountFR", fill = input$x)) +
geom_col() +
labs(title = "Admissions by Ethnicity",
x = "Ethnicity",
y = "Number of Admits") +
theme(plot.title = element_text(size = rel(1.3), hjust = 0.5), axis.text.x = element_text(angle = 60, hjust = 1))
})
}
shinyApp(ui, server)
runApp('Desktop/BIS15W2024_cberevoescu/all_labs_hw/hw13_shiny/hw13_app_q2.R')
runApp('Desktop/BIS15W2024_cberevoescu/all_labs_hw/hw13_shiny/hw13_app_q3.R')
